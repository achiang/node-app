#!/bin/bash

set -eu # -x for verbose logging to juju debug-log

umask 002

install_root=`config-get install_root`
app_name=`config-get app_name`
app_dir="$install_root/$app_name"
app_user=`config-get app_user`
app_branch=`config-get app_branch`
app_port=`config-get app_port`

update_app() {
    cd $app_dir

    do_fetch=false;

    # Always fetch latest if branch requested
    if git branch|grep -q " ${app_branch}\$"; then
	do_fetch=true;
	git checkout ${app_branch}
    else # tag/commit ref
	if git checkout ${app_branch}; then
	    do_fetch=false;
	else
	    do_fetch=true;
	fi
    fi

    if $do_fetch; then
	git pull origin && git checkout $app_branch
    fi
}

configure_app() {
  juju-log "Configuring ${app_name}..."

  # If Procfile found, use it with foreman module to create upstart script
  if [ -f ${app_dir}/Procfile ]; then
    juju-log "Using Procfile to configure ${app_name} using foreman..."

    if [ -f /etc/juju_nodejs_app_${app_name}_mongodb.env ]; then
	mongodb_config=`cat /etc/juju_nodejs_app_${app_name}_mongodb.env`
    else
	mongodb_config='""'
    fi

    cat > /etc/juju_nodejs_app_${app_name}.env <<EOS
{
    "name": "${app_name}"
    , "port": ${app_port}
    , "node_env": "production"
    , "mongo": ${mongodb_config}
}
EOS

    cd $app_dir # foreman export uses this as root
    nf export -j ${app_dir}/Procfile -e /etc/juju_nodejs_app_${app_name}.env -a ${app_name} -u ${app_user} -o /etc/init -t upstart
  else
    config_file_path=${app_dir}/config/config.js
    if [ -f $config_file_path ]; then
      juju-log "Writing $app_name config file $config_file_path"
      sed -i "s/name.*/name\" : \"${app_name}\"/" $config_file_path
      sed -i "s/listen_port.*/listen_port\" : \"${app_port}\"/" $config_file_path
    fi
  fi
}

update_app
configure_app

service ${app_name} restart
